{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.


  Usage:
  {% render 'product-variant-options',
    product: product,
    option: option,
    block: block
  %}
{% endcomment %}
{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id
-%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {%- if block.settings.picker_type == 'button' -%}
    <input
      type="radio"
      id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      name="{{ option.name }}"
      value="{{ value | escape }}"
      form="{{ product_form_id }}"
      {% if option.selected_value == value %}
        checked
      {% endif %}
      {% if option_disabled %}
        class="disabled"
      {% endif %}
    >
    <label for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}">
      {{ value -}}
      <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
    </label>
  {%- elsif block.settings.picker_type == 'dropdown' -%}
    <option
      value="{{ value | escape }}"
      {% if option.selected_value == value %}
        selected="selected"
      {% endif %}
    >
      {% if option_disabled -%}
        {{- 'products.product.value_unavailable' | t: option_value: value -}}
      {%- else -%}
        {{- value -}}
      {%- endif %}
    </option>
  {%- endif -%}
{%- endfor -%}
function getPriceRangeValues() { const minPriceInput = document.getElementById('minPriceInput'); const maxPriceInput =
document.getElementById('maxPriceInput');

const minPrice = minPriceInput.value.trim() !== '' ? parseFloat(minPriceInput.value.trim()) : null; const maxPrice =
maxPriceInput.value.trim() !== '' ? parseFloat(maxPriceInput.value.trim()) : null;

return { minPrice, maxPrice }; }

function getPriceSearchParams(priceRangeValues) { let params = '';

if (priceRangeValues.minPrice !== null) { params += `&min_price=${priceRangeValues.minPrice}`; }

if (priceRangeValues.maxPrice !== null) { params += `&max_price=${priceRangeValues.maxPrice}`; }

return params; }

function getCollectionValues() { const selectedCollections = document.querySelectorAll('.collection-checkbox:checked');
const collectionValues = Array.from(selectedCollections).map(collection => collection.value); return collectionValues; }

function getCollectionSearchParams(collectionValues) { let params = '';

if (collectionValues.length > 0) { params += `&collections=${collectionValues.join(',')}`; }

return params; } class FacetFiltersForm extends HTMLElement { // Existing code...

getPriceRangeValues() { const minPriceInput = document.getElementById('minPriceInput'); const maxPriceInput =
document.getElementById('maxPriceInput');

const minPrice = minPriceInput.value.trim() !== '' ? parseFloat(minPriceInput.value.trim()) : null; const maxPrice =
maxPriceInput.value.trim() !== '' ? parseFloat(maxPriceInput.value.trim()) : null;

return { minPrice, maxPrice }; }

getPriceSearchParams(priceRangeValues) { let params = '';

if (priceRangeValues.minPrice !== null) { params += `&min_price=${priceRangeValues.minPrice}`; }

if (priceRangeValues.maxPrice !== null) { params += `&max_price=${priceRangeValues.maxPrice}`; }

return params; }

getCollectionValues() { const selectedCollections = document.querySelectorAll('.collection-checkbox:checked'); const
collectionValues = Array.from(selectedCollections).map(collection => collection.value); return collectionValues; }

getCollectionSearchParams(collectionValues) { let params = '';

if (collectionValues.length > 0) { params += `&collections=${collectionValues.join(',')}`; }

return params; }

onSubmitForm(searchParams, event) { const priceRangeValues = this.getPriceRangeValues(); const priceParams =
this.getPriceSearchParams(priceRangeValues); searchParams += '&' + priceParams;

const collectionValues = this.getCollectionValues(); const collectionParams =
this.getCollectionSearchParams(collectionValues); searchParams += '&' + collectionParams;

FacetFiltersForm.renderPage(searchParams, event); }

// Existing code... }
<!-- Example HTML structure for price range selection -->
<div id="priceRangeContainer">
  <label for="minPriceInput">Min Price:</label>
  <input type="number" id="minPriceInput" name="minPrice" placeholder="Min Price">
  <label for="maxPriceInput">Max Price:</label>
  <input type="number" id="maxPriceInput" name="maxPrice" placeholder="Max Price">
</div>

<!-- Example HTML structure for collection filtering -->
<div id="collectionFilterContainer">
  <h4>Filter by Collection:</h4>
  <input type="checkbox" class="collection-checkbox" id="collection1" name="collection" value="collection1">
  <label for="collection1">Collection 1</label>
  <input type="checkbox" class="collection-checkbox" id="collection2" name="collection" value="collection2">
  <label for="collection2">Collection 2</label>
  <!-- Add more checkboxes for additional collections -->
</div>
