{% comment %}
  Renders a product media modal. Also see 'product-media-gallery'

  Accepts:
  - product: {Object} Product liquid object
  - variant_images: {Array} Product images associated with a variant

  Usage:
  {% render 'product-media-modal' %}
{% endcomment %}

<product-modal id="ProductModal-{{ section.id }}" class="product-media-modal media-modal">
  <div
    class="product-media-modal__dialog"
    role="dialog"
    aria-label="{{ 'products.modal.label' | t }}"
    aria-modal="true"
    tabindex="-1"
  >
    <button
      id="ModalClose-{{ section.id }}"
      type="button"
      class="product-media-modal__toggle"
      aria-label="{{ 'accessibility.close' | t }}"
    >
      {% render 'icon-close' %}
    </button>

    <div
      class="product-media-modal__content color-{{ settings.color_schemes | first }} gradient"
      role="document"
      aria-label="{{ 'products.modal.label' | t }}"
      tabindex="0"
    >
      {%- liquid
        if product.selected_or_first_available_variant.featured_media != null
          assign media = product.selected_or_first_available_variant.featured_media
          render 'product-media', media: media, loop: section.settings.enable_video_looping, variant_image: section.settings.hide_variants
        endif
      -%}

      {%- for media in product.media -%}
        {%- liquid
          if section.settings.hide_variants and variant_images contains media.src or variant_images contains media.id
            assign variant_image = true
          else
            assign variant_image = false
          endif

          unless media.id == product.selected_or_first_available_variant.featured_media.id
            render 'product-media', media: media, loop: section.settings.enable_video_looping, variant_image: variant_image
          endunless
        -%}
      {%- endfor -%}
    </div>
  </div>
</product-modal>
function getPriceRangeValues() { const minPriceInput = document.getElementById('minPriceInput'); const maxPriceInput =
document.getElementById('maxPriceInput');

const minPrice = minPriceInput.value.trim() !== '' ? parseFloat(minPriceInput.value.trim()) : null; const maxPrice =
maxPriceInput.value.trim() !== '' ? parseFloat(maxPriceInput.value.trim()) : null;

return { minPrice, maxPrice }; }

function getPriceSearchParams(priceRangeValues) { let params = '';

if (priceRangeValues.minPrice !== null) { params += `&min_price=${priceRangeValues.minPrice}`; }

if (priceRangeValues.maxPrice !== null) { params += `&max_price=${priceRangeValues.maxPrice}`; }

return params; }

function getCollectionValues() { const selectedCollections = document.querySelectorAll('.collection-checkbox:checked');
const collectionValues = Array.from(selectedCollections).map(collection => collection.value); return collectionValues; }

function getCollectionSearchParams(collectionValues) { let params = '';

if (collectionValues.length > 0) { params += `&collections=${collectionValues.join(',')}`; }

return params; } class FacetFiltersForm extends HTMLElement { // Existing code...

getPriceRangeValues() { const minPriceInput = document.getElementById('minPriceInput'); const maxPriceInput =
document.getElementById('maxPriceInput');

const minPrice = minPriceInput.value.trim() !== '' ? parseFloat(minPriceInput.value.trim()) : null; const maxPrice =
maxPriceInput.value.trim() !== '' ? parseFloat(maxPriceInput.value.trim()) : null;

return { minPrice, maxPrice }; }

getPriceSearchParams(priceRangeValues) { let params = '';

if (priceRangeValues.minPrice !== null) { params += `&min_price=${priceRangeValues.minPrice}`; }

if (priceRangeValues.maxPrice !== null) { params += `&max_price=${priceRangeValues.maxPrice}`; }

return params; }

getCollectionValues() { const selectedCollections = document.querySelectorAll('.collection-checkbox:checked'); const
collectionValues = Array.from(selectedCollections).map(collection => collection.value); return collectionValues; }

getCollectionSearchParams(collectionValues) { let params = '';

if (collectionValues.length > 0) { params += `&collections=${collectionValues.join(',')}`; }

return params; }

onSubmitForm(searchParams, event) { const priceRangeValues = this.getPriceRangeValues(); const priceParams =
this.getPriceSearchParams(priceRangeValues); searchParams += '&' + priceParams;

const collectionValues = this.getCollectionValues(); const collectionParams =
this.getCollectionSearchParams(collectionValues); searchParams += '&' + collectionParams;

FacetFiltersForm.renderPage(searchParams, event); }

// Existing code... }
